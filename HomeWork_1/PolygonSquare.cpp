#include "bits/stdc++.h"

/*
 *  Вычислить площадь выпуклого n-угольника, заданного координатами своих вершин. Вначале вводится количество вершин, затем последовательно целочисленные координаты всех вершин в порядке обхода против часовой стрелки.
 *  n < 1000, координаты < 10000.
 *  Указание. Для вычисления площади n-угольника можно посчитать сумму ориентированных площадей трапеций под каждой стороной многоугольника.
 */

inline double midline(double a, double b) { return (a + b) / 2; }


int main(int argc, char **argv){
  int n = 0;
  std::cin >> n;
  double x, y, xl, yl, x0, y0, S = 0;
  std::cin >> x0 >> y0;                     // Кординаты первой вершины - понадобятся для поиска площади под последней стороной
  xl = x0;
  yl = y0;

  for(int i = 1; i < n; i++){
    std::cin >> x >> y;
    S += midline(yl, y) * (x - xl);         // Находим ориентированную площадь под стороной (xl, yl ; x, y), где
    xl = x;                                 // {xl, yl} - координаты предыдущей считанной вершины, {x, y} - текущей
    yl = y;                                 // Если {x, y} лежит левее {xl, yl}, в силу обхода по часовой стрелке и выпуклости
  }                                         // площадь будет отрицательна (действительно, под такой стороной лежит только область, не принадлежащая фигуре)

  S += midline(y, y0) * (x0 - x);           // Добавляем ориентированную площадь под последней гранью

  std::cout << S;                           // Таким образом, M(n) = O(1), T(n) = O(n)

}